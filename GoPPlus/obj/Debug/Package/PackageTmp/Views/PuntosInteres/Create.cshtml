@model GoPS.Models.PuntosInteres

@{
    ViewBag.Title = "Crear Punto de Interés";
}

<style type='text/css'>
    .marker {
        display: block;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        padding: 0;
    }
</style>

@Html.Hidden("Permiso", "Configuraciones")
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="main">
        @{Html.RenderPartial("Breadcrumb", "Puntos de Interés > Crear"); }
        <div class="row">
            <div class="col-lg-12">
                <div id="map" style='width: 900px; height: 500px;'>

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true, "No se pudo crear el registro. Por favor, corrija los campos en rojo e intente de nuevo.", new { @class = "text-danger" })
                    <div class="form-group @(@ViewBag.MostrarAfiliados ? "show" : "hide")">
                        @Html.LabelFor(model => model.ID_Afiliado, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_Afiliado", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ID_Afiliado, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Habilitado, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Habilitado, new { htmlAttributes = new { @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.Habilitado, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Calles.Colonias.Ciudades.ID_Estado, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_Estado", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Calles.Colonias.Ciudades.ID_Estado, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Calles.Colonias.ID_Ciudad, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_Ciudad", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Calles.Colonias.ID_Ciudad, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Calles.ID_Colonia, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_Colonia", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Calles.ID_Colonia, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ID_Calle, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_Calle", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ID_Calle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Latitud, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Latitud, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Latitud, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Longitud, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Longitud, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Longitud, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ID_TipoPuntoInteres, htmlAttributes: new { @class = "control-label col-md-2 field-required" })
                        <div class="col-md-10">
                            @Html.DropDownList("ID_TipoPuntoInteres", null, "-Seleccione-", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ID_TipoPuntoInteres, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Crear" class="btn btn-default" />
                        </div>
                    </div>
                </div>
                <div>
                    @Html.ActionLink("Regresar", "Index", null, new { @class = "_Visualizacion" })
                </div>

            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/js/ActualizarGeografiaSelectLists.js"></script>
    <script type="text/javascript">
        var map;
        var myLatLng = { lat: 21.1378588, lng: -101.6854752 };
        var marker;
        var icon = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|2ECC71&chf=a,s,ee00FFFF';

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: myLatLng,
                scrollwheel: true,
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            map.addListener('click', function (event) {
                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
                $('#Latitud').val(lat);
                $('#Longitud').val(lng);
                makeMarker(event.latLng);
            });
        }

        function makeMarker(position) {
            if(marker != null)
                marker.setMap(null);
            marker = new google.maps.Marker({
                position: position,
                map: map,
                icon: icon
            });
            map.panTo(position);
        }

        function fly(latitude, longitude) {
            var position = new google.maps.LatLng(latitude, longitude);
            map.panTo(position);
            makeMarker(position);
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB1QcV84xOLBurOHEq1GQwTAxEiBwfGfn0&callback=initMap" async defer></script>
}
